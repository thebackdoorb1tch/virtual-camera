<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Live Camera Feed (Desktop)</title>
    <script src="https://cdn.jsdelivr.net/npm/qrcode@1.4.4/build/qrcode.min.js"></script>
    <style>
        body {
            font-family: Arial, sans-serif;
            text-align: center;
        }
        video {
            width: 100%;
            max-width: 600px;
        }
    </style>
</head>
<body>
    <h1>Live Camera Feed from Phone</h1>
    <div id="qr-code"></div>
    <video id="videoElement" autoplay playsinline></video>

    <script>
        const videoElement = document.getElementById("videoElement");

        // Create a unique session ID for this connection
        const uniqueSessionId = "session123"; // Ideally, generate this dynamically for each user

        // URL to be encoded in the QR code for the phone to connect
        const qrCodeURL = `http://localhost:3000/connect?session=${uniqueSessionId}`;
        QRCode.toCanvas(document.getElementById("qr-code"), qrCodeURL, function (error) {
            if (error) console.error(error);
        });

        // Setting up WebRTC to receive the video stream from the phone
        const peerConnection = new RTCPeerConnection();

        // Placeholder signaling: Normally you'd use a signaling server for communication between devices
        const signalingChannel = new BroadcastChannel('webrtc-signaling');

        signalingChannel.onmessage = async (event) => {
            const message = event.data;
            if (message.type === 'offer') {
                // Receive offer and create an answer
                await peerConnection.setRemoteDescription(new RTCSessionDescription(message.offer));
                const answer = await peerConnection.createAnswer();
                await peerConnection.setLocalDescription(answer);

                // Send the answer back to the phone
                signalingChannel.postMessage({ type: 'answer', answer });
            } else if (message.type === 'candidate') {
                await peerConnection.addIceCandidate(new RTCIceCandidate(message.candidate));
            }
        };

        // Set up ICE candidate handling
        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                signalingChannel.postMessage({ type: 'candidate', candidate: event.candidate });
            }
        };

        // Set up video stream display when the phone sends media
        peerConnection.ontrack = (event) => {
            videoElement.srcObject = event.streams[0];
        };
    </script>
</body>
</html>

